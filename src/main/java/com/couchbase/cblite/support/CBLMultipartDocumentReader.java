package com.couchbase.cblite.support;

import android.util.Log;

import com.couchbase.cblite.CBLBlobStoreWriter;
import com.couchbase.cblite.CBLDatabase;
import com.couchbase.cblite.CBLServer;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.util.ByteArrayBuffer;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class CBLMultipartDocumentReader implements CBLMultipartReaderDelegate {

    /** The response which contains the input stream we need to read from */
    private HttpResponse response;

    private CBLMultipartReader multipartReader;
    private CBLBlobStoreWriter curAttachment;
    private ByteArrayBuffer jsonBuffer;
    private Object document;
    private CBLDatabase database;
    private Map<String, CBLBlobStoreWriter> attachmentsByName;
    private Map<String, CBLBlobStoreWriter> attachmentsByMd5Digest;

    public CBLMultipartDocumentReader(HttpResponse response, CBLDatabase database) {
        this.response = response;
        this.database = database;
    }


    public Object getDocumentProperties() {
        return document;
    }

    public void parseJsonBuffer() {
        try {
            document = CBLServer.getObjectMapper().readValue(jsonBuffer.toByteArray(), Map.class);
        } catch (IOException e) {
            throw new IllegalStateException("Failed to parse json buffer", e);
        }
    }

    public void setContentType(String contentType) {
        if (!contentType.startsWith("multipart/")) {
            throw new IllegalArgumentException("contentType must start with multipart/");
        }
        multipartReader = new CBLMultipartReader(contentType, this);
        attachmentsByName = new HashMap<String, CBLBlobStoreWriter>();
        attachmentsByMd5Digest = new HashMap<String, CBLBlobStoreWriter>();
    }

    public void appendData(byte[] data) {
        if (multipartReader != null) {
            multipartReader.appendData(data);
        }
        else {
            jsonBuffer.append(data, 0, data.length);
        }
    }

    @Override
    public void startedPart(Map<String, String> headers) {

        if (document == null) {
           jsonBuffer = new ByteArrayBuffer(1024);
        }
        else {
            curAttachment = database.getAttachmentWriter();

            String contentDisposition = response.getFirstHeader("Content-Disposition").getValue();
            if (contentDisposition.startsWith("attachment; filename=")) {
                // TODO: Parse this less simplistically. Right now it assumes it's in exactly the same
                // format generated by -[CBL_Pusher uploadMultipartRevision:]. CouchDB (as of 1.2) doesn't
                // output any headers at all on attachments so there's no compatibility issue yet.

                String contentDispositionUnquoted = contentDisposition.replaceAll("^\"|\"$", "");
                String name = contentDispositionUnquoted.substring(21);
                if (name != null) {
                    attachmentsByName.put(name, curAttachment);
                }
            }
        }


    }

    @Override
    public void appendToPart(byte[] data) {
        if (jsonBuffer != null) {
            jsonBuffer.append(data, 0, data.length);
        }
        else {
            curAttachment.appendData(data);
        }
    }

    @Override
    public void finishedPart() {
        if (jsonBuffer != null) {
            parseJsonBuffer();
        }
        else {
            curAttachment.finish();
            String md5String = curAttachment.mD5DigestString();
            attachmentsByMd5Digest.put(md5String, curAttachment);
            curAttachment = null;
        }


    }
}
